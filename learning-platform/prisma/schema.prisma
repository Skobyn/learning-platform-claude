// Prisma Schema for Enterprise Learning Platform
// This schema follows the pseudocode design and supports all major features

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  firstName         String?
  lastName          String?
  displayName       String?
  hashedPassword    String?
  authProvider      AuthProvider @default(LOCAL)
  authProviderId    String?
  role              Role     @default(LEARNER)
  profilePicture    String?
  bio               String?
  isActive          Boolean  @default(true)
  requires2FA       Boolean  @default(false)
  lastLoginAt       DateTime?
  department        String?
  jobTitle          String?
  employeeId        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Organization relationship
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])

  // User preferences and profile
  preferences       UserPreferences?
  profile           Profile?
  
  // Learning data
  enrollments       Enrollment[]
  progress          Progress[]
  achievements      Achievement[]
  quizAttempts      QuizAttempt[]
  
  // Content creation (for instructors)
  createdCourses    Course[] @relation("CourseCreator")
  createdQuizzes    Quiz[]   @relation("QuizCreator")
  
  // Session management
  sessions          UserSession[]

  // Notifications
  notifications     Notification[]

  // Authentication & Security
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  mfaSettings            MfaSetting?
  trustedDevices         TrustedDevice[]
  oauthAccounts          OauthAccount[]

  // Media & Content
  uploadedFiles          MediaFile[]
  certificates          Certificate[]
  activityLogs          ActivityLog[]
  videoWatchProgress    VideoWatchProgress[]
  videoStreamingTokens  VideoStreamingToken[]

  @@map("users")
}

model UserPreferences {
  id                      String @id @default(cuid())
  userId                  String @unique
  user                    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  language                String @default("en")
  timezone                String @default("UTC")
  
  // Notification preferences
  emailNotifications      Boolean @default(true)
  pushNotifications       Boolean @default(true)
  inAppNotifications      Boolean @default(true)
  courseUpdates          Boolean @default(true)
  assessmentReminders    Boolean @default(true)
  achievementAlerts      Boolean @default(true)
  
  // Learning preferences
  learningStyle          LearningStyle @default(VISUAL)
  difficultyPreference   Difficulty @default(BEGINNER)
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  @@map("user_preferences")
}

model Organization {
  id          String @id @default(cuid())
  name        String
  code        String @unique
  domains     String[] // Email domains for auto-enrollment
  logo        String?
  settings    OrganizationSettings?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  courses     Course[]
  ssoProviders SsoProvider[]
  ipWhitelistRules IpWhitelistRule[]

  @@map("organizations")
}

model UserSession {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceFingerprint String
  ipAddress         String
  userAgent         String
  provider          AuthProvider @default(LOCAL)
  sessionData       Json?
  isActive          Boolean  @default(true)
  expiresAt         DateTime
  lastAccessAt      DateTime @default(now())
  invalidatedAt     DateTime?
  invalidationReason String?
  createdAt         DateTime @default(now())

  @@unique([userId, provider])
  @@map("user_sessions")
}

// Course Management
model Course {
  id                String   @id @default(cuid())
  title             String
  description       String
  objectives        String[]
  status            CourseStatus @default(DRAFT)
  category          String
  difficulty        Difficulty
  estimatedDuration Int      // in minutes
  tags              String[]
  price             Float    @default(0)
  currency          String   @default("USD")
  thumbnailUrl      String?
  isAIGenerated     Boolean  @default(false)
  
  // Relationships
  createdBy         String
  creator           User     @relation("CourseCreator", fields: [createdBy], references: [id])
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])
  
  // Course content
  modules           Module[]
  
  // Learning data
  enrollments       Enrollment[]
  
  // New feature relations
  videos            Video[]
  certificates      Certificate[]
  
  // Metadata
  enrollmentCount   Int      @default(0)
  averageRating     Float    @default(0)
  publishedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("courses")
}

model Module {
  id                String   @id @default(cuid())
  courseId          String
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  title             String
  description       String
  objectives        String[]
  orderIndex        Int
  estimatedDuration Int      // in minutes
  prerequisites     String[] // Module IDs
  
  // Content
  lessons           Lesson[]
  quiz              Quiz?
  
  // Progress tracking
  progress          Progress[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("modules")
}

model Lesson {
  id                String      @id @default(cuid())
  moduleId          String
  module            Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  title             String
  content           String      // Rich text content
  contentType       ContentType @default(TEXT)
  orderIndex        Int
  keyPoints         String[]
  estimatedDuration Int         // in minutes
  
  // Media
  videoUrl          String?
  attachments       String[]    // File URLs
  
  // Resources
  resources         Resource[]
  
  // Progress tracking
  progress          Progress[]
  
  // New feature relations
  videos            Video[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("lessons")
}

model Resource {
  id          String       @id @default(cuid())
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  title       String
  type        ResourceType
  url         String
  description String?
  
  createdAt   DateTime @default(now())
  
  @@map("resources")
}

// Assessment System
model Quiz {
  id                      String  @id @default(cuid())
  moduleId                String  @unique
  module                  Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  title                   String
  description             String
  passingScore            Int     @default(70)
  timeLimit              Int?    // in minutes
  maxAttempts            Int     @default(3)
  showResultsImmediately Boolean @default(true)
  allowReview            Boolean @default(true)
  
  // Relationships
  createdBy              String
  creator                User    @relation("QuizCreator", fields: [createdBy], references: [id])
  
  questions              Question[]
  attempts               QuizAttempt[]
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  @@map("quizzes")
}

model Question {
  id            String       @id @default(cuid())
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  text          String
  type          QuestionType
  options       String[]     // For multiple choice
  correctAnswer Json         // Flexible format for different question types
  explanation   String
  points        Int          @default(1)
  difficulty    QuestionDifficulty @default(MEDIUM)
  orderIndex    Int
  
  responses     QuestionResponse[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("questions")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  score       Float?
  passed      Boolean  @default(false)
  timeSpent   Int?     // in seconds
  
  responses   QuestionResponse[]
  
  startedAt   DateTime @default(now())
  submittedAt DateTime?
  
  @@map("quiz_attempts")
}

model QuestionResponse {
  id         String      @id @default(cuid())
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answer     Json        // Flexible format for different answer types
  isCorrect  Boolean
  pointsEarned Int       @default(0)
  
  submittedAt DateTime @default(now())
  
  @@map("question_responses")
}

// Progress Tracking
model Enrollment {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  status          EnrollmentStatus @default(ACTIVE)
  progress        Float            @default(0) // Percentage
  certificateIssued Boolean        @default(false)
  
  enrolledAt      DateTime         @default(now())
  completedAt     DateTime?
  lastAccessedAt  DateTime?
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId             String
  lesson               Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  moduleId             String
  module               Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  completionPercentage Float    @default(0)
  timeSpent           Int      @default(0) // in minutes
  notes               String?
  
  startedAt           DateTime?
  completedAt         DateTime?
  lastAccessedAt      DateTime @default(now())
  
  @@unique([userId, lessonId])
  @@map("progress")
}

// Gamification & Achievements
model Achievement {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            AchievementType
  title           String
  description     String
  level           BadgeLevel
  courseId        String?         // Optional - for course-specific achievements
  verificationCode String?        // For blockchain verification
  
  earnedAt        DateTime        @default(now())
  expiresAt       DateTime?
  
  @@map("achievements")
}

// Notification System
model Notification {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      NotificationType
  title     String
  message   String
  data      Json?              // Additional notification data
  
  isRead    Boolean            @default(false)
  emailSent Boolean            @default(false)
  pushSent  Boolean            @default(false)
  
  createdAt DateTime           @default(now())
  readAt    DateTime?
  
  @@map("notifications")
}

// Analytics & Reporting
model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?  // Optional - can track anonymous events
  eventType String
  data      Json
  metadata  Json?
  sessionId String?
  
  timestamp DateTime @default(now())
  
  @@map("analytics_events")
}

// Enums
enum Role {
  LEARNER
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  VIDEO
  INTERACTIVE
  DOCUMENT
}

enum ResourceType {
  LINK
  DOCUMENT
  VIDEO
  BOOK
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  ESSAY
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
  WITHDRAWN
}

enum AchievementType {
  BADGE
  CERTIFICATE
  MILESTONE
}

enum BadgeLevel {
  BRONZE
  SILVER
  GOLD
}

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  READING_WRITING
}

enum NotificationType {
  COURSE_UPDATE
  ASSESSMENT_REMINDER
  ACHIEVEMENT_EARNED
  ENROLLMENT_CONFIRMATION
  COURSE_COMPLETED
  SYSTEM_ANNOUNCEMENT
}

// Additional models for new features

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Email Verification Tokens
model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("email_verification_tokens")
}

// Media Files (for uploads)
model MediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  uploadedBy   String
  uploader     User     @relation(fields: [uploadedBy], references: [id])
  metadata     Json?
  createdAt    DateTime @default(now())

  // Relations to videos
  videos       Video[]

  @@map("media_files")
}

// Video Streaming
model Video {
  id               String    @id @default(cuid())
  mediaFileId      String
  mediaFile        MediaFile @relation(fields: [mediaFileId], references: [id])
  courseId         String?
  course           Course?   @relation(fields: [courseId], references: [id])
  lessonId         String?
  lesson           Lesson?   @relation(fields: [lessonId], references: [id])
  originalFilename String
  status           VideoStatus @default(PROCESSING)
  processedAt      DateTime?
  metadata         Json?
  createdAt        DateTime  @default(now())

  // Relations
  watchProgress    VideoWatchProgress[]
  streamingTokens  VideoStreamingToken[]

  @@map("videos")
}

model VideoWatchProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  position    Int      @default(0) // in seconds
  duration    Int      @default(0) // in seconds
  completed   Boolean  @default(false)
  lastWatched DateTime @default(now())

  @@unique([userId, videoId])
  @@map("video_watch_progress")
}

model VideoStreamingToken {
  id          String   @id @default(cuid())
  token       String   @unique
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[] // JSON array of permissions
  expiresAt   DateTime
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("video_streaming_tokens")
}

// Certificates
model Certificate {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  courseId         String
  course           Course   @relation(fields: [courseId], references: [id])
  templateId       String
  verificationCode String   @unique
  pdfUrl           String
  issuedAt         DateTime @default(now())
  metadata         Json?

  @@map("certificates")
}

// Activity Logs (for security and auditing)
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

enum VideoStatus {
  PROCESSING
  READY
  ERROR
}

// Authentication and Security Models

// User Profile (separated from User for cleaner organization)
model Profile {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio       String?
  avatar    String?
  website   String?
  location  String?
  preferences Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

// Organization Settings
model OrganizationSettings {
  id                        String      @id @default(cuid())
  organizationId           String      @unique
  organization             Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Authentication settings
  requireMFA               Boolean     @default(false)
  allowSelfRegistration    Boolean     @default(true)
  allowTrustedDeviceSkipMFA Boolean    @default(false)
  sessionTimeout           Int         @default(480) // minutes
  maxConcurrentSessions    Int         @default(3)

  // IP Whitelist settings
  ipWhitelistEnabled       Boolean     @default(false)
  ipWhitelist              String[]    @default([])

  // Password policy
  passwordMinLength        Int         @default(8)
  passwordRequireNumbers   Boolean     @default(true)
  passwordRequireSymbols   Boolean     @default(true)
  passwordRequireUppercase Boolean     @default(true)
  passwordRequireLowercase Boolean     @default(true)
  passwordExpiryDays       Int?        @default(90)

  // Other settings
  enforceEmailVerification Boolean     @default(true)
  allowPasswordReset       Boolean     @default(true)

  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt

  @@map("organization_settings")
}

// Multi-Factor Authentication
model MfaSetting {
  id              String @id @default(cuid())
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  isEnabled       Boolean @default(false)
  method          MfaMethod @default(TOTP)
  secret          String
  backupCodes     String[] @default([])

  lastUsedAt      DateTime?
  failedAttempts  Int      @default(0)
  lastFailedAt    DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("mfa_settings")
}

// Device Trust Management
model TrustedDevice {
  id              String @id @default(cuid())
  userId          String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fingerprint     String
  name            String
  deviceInfo      Json
  isTrusted       Boolean @default(false)
  trustLevel      TrustLevel @default(LOW)

  lastUsedAt      DateTime @default(now())
  expiresAt       DateTime?
  isActive        Boolean @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, fingerprint])
  @@map("trusted_devices")
}

// OAuth Account Linking
model OauthAccount {
  id            String @id @default(cuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider      AuthProvider
  providerId    String
  accessToken   String
  refreshToken  String?
  profile       Json

  expiresAt     DateTime?
  lastUsedAt    DateTime @default(now())

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, provider])
  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

// SSO Provider Configuration
model SsoProvider {
  id                String       @id @default(cuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name              String
  displayName       String
  type              SsoType
  config            Json
  isActive          Boolean      @default(true)

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([organizationId, name])
  @@map("sso_providers")
}

// IP Whitelist Rules
model IpWhitelistRule {
  id               String       @id @default(cuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name             String
  ipAddress        String?
  ipRange          String?
  ruleType         IpRuleType
  description      String?
  isActive         Boolean      @default(true)
  metadata         Json?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("ip_whitelist_rules")
}

// Audit Logs for Security Events
model AuditLog {
  id           String @id @default(cuid())
  userId       String?
  sessionId    String?
  event        String
  provider     String?
  ipAddress    String?
  userAgent    String?
  success      Boolean
  metadata     Json?
  timestamp    DateTime @default(now())
  riskLevel    RiskLevel @default(LOW)
  organizationId String?
  resourceId   String?
  resourceType String?

  @@index([userId])
  @@index([event])
  @@index([timestamp])
  @@index([riskLevel])
  @@index([success])
  @@map("audit_logs")
}

// Security Alerts
model SecurityAlert {
  id             String @id @default(cuid())
  type           AlertType
  severity       AlertSeverity
  userId         String?
  organizationId String?
  description    String
  metadata       Json
  isResolved     Boolean @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?

  createdAt      DateTime @default(now())

  @@index([type])
  @@index([severity])
  @@index([isResolved])
  @@index([createdAt])
  @@map("security_alerts")
}

// Pending Sessions (for MFA flow)
model PendingSession {
  id        String   @id @default(cuid())
  userId    String
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("pending_sessions")
}

// Group to Role Mapping (for SAML attribute mapping)
model GroupRoleMapping {
  id             String @id @default(cuid())
  organizationId String
  groupName      String
  roleId         String
  role           UserRole @relation(fields: [roleId], references: [id])

  createdAt      DateTime @default(now())

  @@unique([organizationId, groupName])
  @@map("group_role_mappings")
}

// User Roles (for RBAC)
model UserRole {
  id             String @id @default(cuid())
  userId         String
  roleId         String
  organizationId String?

  groupMappings  GroupRoleMapping[]

  createdAt      DateTime @default(now())

  @@unique([userId, roleId, organizationId])
  @@map("user_roles")
}

// New Enums for Authentication

enum AuthProvider {
  LOCAL
  GOOGLE
  MICROSOFT
  LINKEDIN
  SAML
  OAUTH
}

enum MfaMethod {
  TOTP
  SMS
  EMAIL
}

enum TrustLevel {
  LOW
  MEDIUM
  HIGH
}

enum SsoType {
  SAML
  OAUTH
  OIDC
}

enum IpRuleType {
  SINGLE_IP
  IP_RANGE
  CIDR
  COUNTRY
  REGION
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertType {
  SUSPICIOUS_LOGIN
  MULTIPLE_FAILURES
  UNUSUAL_LOCATION
  PRIVILEGE_ESCALATION
  DATA_BREACH
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}