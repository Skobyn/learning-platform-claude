name: CD - Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      deploy_version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_STAGING }}
  GCP_REGION: us-central1
  SERVICE_NAME: learning-platform-staging
  ENVIRONMENT: staging

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    permissions:
      contents: read
      id-token: write
      deployments: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: 🐳 Configure Docker auth
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: 📦 Get image tag
        id: image
        run: |
          if [ -n "${{ github.event.inputs.deploy_version }}" ]; then
            echo "tag=${{ github.event.inputs.deploy_version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: 🏗️ Build and push image
        run: |
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/learning-platform/app:${{ steps.image.outputs.tag }}"
          
          docker build \
            --build-arg NODE_ENV=staging \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            -t ${IMAGE_URL} \
            .
          
          docker push ${IMAGE_URL}

      - name: 🗄️ Run database migrations
        run: |
          gcloud run jobs update migrate-db-staging \
            --image="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/learning-platform/app:${{ steps.image.outputs.tag }}" \
            --region=${{ env.GCP_REGION }} || \
          gcloud run jobs create migrate-db-staging \
            --image="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/learning-platform/app:${{ steps.image.outputs.tag }}" \
            --region=${{ env.GCP_REGION }} \
            --add-cloudsql-instances=${{ secrets.CLOUD_SQL_CONNECTION_STAGING }} \
            --set-secrets="DATABASE_URL=database-url-staging:latest" \
            --command="npx" \
            --args="prisma,migrate,deploy"
          
          gcloud run jobs execute migrate-db-staging \
            --region=${{ env.GCP_REGION }} \
            --wait

      - name: 🚀 Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/learning-platform/app:${{ steps.image.outputs.tag }}" \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ secrets.CLOUD_SQL_CONNECTION_STAGING }} \
            --set-env-vars="NODE_ENV=staging" \
            --set-env-vars="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_STAGING }}" \
            --set-env-vars="GCS_BUCKET=${{ secrets.GCS_BUCKET_STAGING }}" \
            --set-secrets="DATABASE_URL=database-url-staging:latest" \
            --set-secrets="REDIS_URL=redis-url-staging:latest" \
            --set-secrets="NEXTAUTH_SECRET=nextauth-secret-staging:latest" \
            --set-secrets="OPENAI_API_KEY=openai-api-key-staging:latest" \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=5 \
            --timeout=300 \
            --labels="environment=staging,version=${{ steps.image.outputs.tag }},deployed-by=github-actions"
          
          echo "url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: 🧪 Run smoke tests
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f "${SERVICE_URL}/api/health" > /dev/null 2>&1; then
              echo "✅ Service is healthy"
              break
            fi
            echo "Waiting for service to be ready... (attempt $i/30)"
            sleep 10
          done
          
          # Run basic smoke tests
          curl -f "${SERVICE_URL}/api/health" || exit 1
          curl -f "${SERVICE_URL}/api/health/db" || exit 1
          curl -f "${SERVICE_URL}/api/health/redis" || exit 1

      - name: 🔔 Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment ${{ job.status }}
            Environment: ${{ env.ENVIRONMENT }}
            Version: ${{ steps.image.outputs.tag }}
            URL: ${{ steps.deploy.outputs.url }}
            Triggered by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: 📊 Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              payload: {
                version: '${{ steps.image.outputs.tag }}',
                url: '${{ steps.deploy.outputs.url }}'
              },
              environment: 'staging',
              description: 'Deploying to staging environment',
              transient_environment: false,
              production_environment: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'Deployment successful',
              environment_url: '${{ steps.deploy.outputs.url }}',
              auto_inactive: false
            });