# Optimized Docker Compose for Learning Platform
# Production-ready configuration with performance optimizations

version: '3.8'

services:
  # ============================================================================
  # APPLICATION SERVICE
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: config/performance/container/Dockerfile.optimized
      args:
        - NODE_ENV=production
        - BUILD_ID=${BUILD_ID:-dev}
        - COMMIT_SHA=${COMMIT_SHA:-local}
      cache_from:
        - learning-platform:latest
    image: learning-platform:${TAG:-latest}
    container_name: learning-platform-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-learning_platform}
      - REDIS_URL=redis://redis:6379
      - REDIS_SESSION_URL=redis://redis:6379/1
      - REDIS_CACHE_URL=redis://redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    resources:
      limits:
        memory: 2G
        cpus: '1.0'
      reservations:
        memory: 512M
        cpus: '0.5'
    networks:
      - app-network
    volumes:
      - app-cache:/tmp/cache
      - app-logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # DATABASE SERVICE (PostgreSQL with optimizations)
  # ============================================================================
  db:
    image: postgres:15-alpine
    container_name: learning-platform-db
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-learning_platform}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./config/performance/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/performance/database/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./config/performance/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-learning_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    resources:
      limits:
        memory: 1G
        cpus: '0.5'
      reservations:
        memory: 256M
        cpus: '0.25'
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # REDIS SERVICE (Multi-instance for different purposes)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: learning-platform-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --databases 16
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    resources:
      limits:
        memory: 512M
        cpus: '0.25'
      reservations:
        memory: 128M
        cpus: '0.1'
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # NGINX REVERSE PROXY (Optional - for advanced load balancing)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: learning-platform-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/performance/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/performance/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    resources:
      limits:
        memory: 128M
        cpus: '0.1'
      reservations:
        memory: 32M
        cpus: '0.05'
    networks:
      - app-network
    profiles:
      - nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # MONITORING AND OBSERVABILITY
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: learning-platform-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/performance/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring
    resources:
      limits:
        memory: 512M
        cpus: '0.25'

  grafana:
    image: grafana/grafana:latest
    container_name: learning-platform-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/performance/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    profiles:
      - monitoring
    resources:
      limits:
        memory: 256M
        cpus: '0.1'

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/db
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  app-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/cache
  
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  
  prometheus-data:
    driver: local
  
  grafana-data:
    driver: local