# NGINX configuration for video streaming
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 5G;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=stream:10m rate=50r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Cache configuration
    proxy_cache_path /var/cache/nginx/streaming
                     levels=1:2
                     keys_zone=streaming_cache:10m
                     max_size=10g
                     inactive=7d
                     use_temp_path=off;

    # Upstream for video processor services
    upstream video_processors {
        least_conn;
        server video-processor:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Health check endpoint
    server {
        listen 80;
        server_name _;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location /nginx-status {
            stub_status on;
            access_log off;
            allow 172.0.0.0/8;
            allow 10.0.0.0/8;
            deny all;
        }
    }

    # Video streaming server
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # CORS headers for video streaming
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Range, Content-Type, Authorization";
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Accept-Ranges";

        # Handle preflight requests
        location ~* \.(m3u8|ts|mp4|webm|mkv)$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Range, Content-Type, Authorization";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Video content delivery with caching
        location ~* ^/video/([a-zA-Z0-9_-]+)/(.*)\.(m3u8|ts|mp4|webm|mkv)$ {
            limit_req zone=stream burst=20 nodelay;
            limit_conn addr 10;

            # Cache configuration
            proxy_cache streaming_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 1d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;

            # Add cache headers
            add_header X-Cache-Status $upstream_cache_status;

            # Proxy to Google Cloud Storage or CDN
            proxy_pass https://storage.googleapis.com/${GOOGLE_CLOUD_BUCKET_NAME}/$request_uri;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host storage.googleapis.com;
            proxy_set_header Range $http_range;

            # Handle range requests for video seeking
            proxy_set_header Accept-Ranges bytes;
            proxy_force_ranges on;

            # Error handling
            error_page 404 = @video_fallback;
        }

        # Fallback for video content
        location @video_fallback {
            proxy_pass http://video_processors;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # API endpoints for video management
        location /api/video/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://video_processors;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Upload timeout for large files
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
        }

        # Video upload endpoint with special handling
        location /api/video/upload {
            limit_req zone=upload burst=5 nodelay;

            # Increase timeouts for large uploads
            client_max_body_size 5G;
            client_body_timeout 600s;
            client_header_timeout 600s;

            proxy_pass http://video_processors;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Upload timeouts
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            proxy_request_buffering off;
        }

        # WebSocket support for real-time updates
        location /ws/ {
            proxy_pass http://video_processors;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Analytics endpoint
        location /api/analytics/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://analytics-service:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static assets with long-term caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Security - deny access to sensitive files
        location ~ /\.(htaccess|htpasswd|env) {
            deny all;
        }

        location ~ /\.git {
            deny all;
        }

        # Default location
        location / {
            proxy_pass http://video_processors;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS server (when SSL certificates are available)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        # SSL certificate paths (mount as volumes)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Include all the same locations as HTTP server
        include /etc/nginx/conf.d/streaming-locations.conf;
    }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    upstream redis_backend {
        server redis:6379;
    }

    server {
        listen 6380;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/redis.log;
    }
}